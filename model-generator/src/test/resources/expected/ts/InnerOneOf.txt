import {BigInteger} from "./BigInteger";

export type InnerOneOf = OrderActivity | NftActivity

export enum OrderActivity_Mode {
    FIRST = "FIRST",
    SECOND = "SECOND",
    THIRD = "THIRD"
}

export enum OrderActivity_OrderType {
    O1 = "O1",
    O2 = "O2"
}

//-------------------- OrderActivity ---------------------//
export type OrderActivity = OrderActivitySell | OrderActivityList | OrderActivityBid

export type OrderActivitySell = {
    "@type": "sell"
    mode: OrderActivity_Mode
    orderType?: OrderActivity_OrderType
    id: string
    size?: InnerOneOf_Size
    date?: string
    address?: BigInteger
    transactionHash?: string
}

export type OrderActivityList = {
    "@type": "list"
    mode: OrderActivity_Mode
    orderType?: OrderActivity_OrderType
    id: string
    size?: InnerOneOf_Size
    date?: string
    address?: BigInteger
    price?: BigInteger
}

export type OrderActivityBid = {
    "@type": "bid"
    mode: OrderActivity_Mode
    orderType?: OrderActivity_OrderType
    id: string
    size?: InnerOneOf_Size
    date?: string
    address?: BigInteger
    price?: BigInteger
}

//-------------------- NftActivity ---------------------//
export type NftActivity = NftActivityBurn | NftActivityTransfer | NftActivityMint

export enum NftActivityBurn_Mode {
    FIRST = "FIRST",
    SECOND = "SECOND",
    THIRD = "THIRD"
}

export type NftActivityBurn = {
    "@type": "burn"
    transactionHash: string
    id: string
    size?: InnerOneOf_Size
    date?: string
    address?: BigInteger
    tokenId?: BigInteger
    value?: BigInteger
    burn?: string
    mode?: NftActivityBurn_Mode
}

export type NftActivityTransfer = {
    "@type": "transfer"
    transactionHash: string
    id: string
    size?: InnerOneOf_Size
    date?: string
    address?: BigInteger
    tokenId?: BigInteger
    value?: BigInteger
    from?: string
}

export type NftActivityMint = {
    "@type": "mint"
    transactionHash: string
    id: string
    size?: InnerOneOf_Size
    date?: string
    address?: BigInteger
    tokenId?: BigInteger
    value?: BigInteger
}

export enum InnerOneOf_Size {
    BIG = "BIG",
    SMALL = "SMALL"
}

